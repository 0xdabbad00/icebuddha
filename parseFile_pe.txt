var IMAGE_DOS_HEADER = parseStruct(0, "									\
typedef struct IMAGE_DOS_HEADER {										\
	WORD  e_magic;      /* 00: MZ Header signature */					\
	WORD  e_cblp;       /* 02: Bytes on last page of file */			\
	WORD  e_cp;         /* 04: Pages in file */							\
	WORD  e_crlc;       /* 06: Relocations */							\
	WORD  e_cparhdr;    /* 08: Size of header in paragraphs */			\
	WORD  e_minalloc;   /* 0a: Minimum extra paragraphs needed */		\
	WORD  e_maxalloc;   /* 0c: Maximum extra paragraphs needed */		\
	WORD  e_ss;         /* 0e: Initial (relative) SS value */			\
	WORD  e_sp;         /* 10: Initial SP value */						\
	WORD  e_csum;       /* 12: Checksum */								\
	WORD  e_ip;         /* 14: Initial IP value */						\
	WORD  e_cs;         /* 16: Initial (relative) CS value */			\
	WORD  e_lfarlc;     /* 18: File address of relocation table */		\
	WORD  e_ovno;       /* 1a: Overlay number */						\
	WORD  e_res[4];     /* 1c: Reserved words */						\
	WORD  e_oemid;      /* 24: OEM identifier (for e_oeminfo) */		\
	WORD  e_oeminfo;    /* 26: OEM information; e_oemid specific */		\
	WORD  e_res2[10];   /* 28: Reserved words */						\
	DWORD e_lfanew;     /* 3c: Offset to extended header */				\
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;									\
");

var e_lfanew = getStructValue(IMAGE_DOS_HEADER, "e_lfanew");

parseStruct(e_lfanew, "													\
typedef struct IMAGE_OPTIONAL_HEADER { 									\
	WORD  Magic;														\
	BYTE  MajorLinkerVersion;											\
	BYTE  MinorLinkerVersion;											\
	DWORD SizeOfCode;													\
	DWORD SizeOfInitializedData;										\
	DWORD SizeOfUninitializedData;										\
	DWORD AddressOfEntryPoint;            /* 0x10 */					\
	DWORD BaseOfCode;													\
	DWORD BaseOfData; 													\
	DWORD ImageBase;													\
	DWORD SectionAlignment;               /* 0x20 */					\
	DWORD FileAlignment;												\
	WORD  MajorOperatingSystemVersion;									\
	WORD  MinorOperatingSystemVersion;									\
	WORD  MajorImageVersion;											\
	WORD  MinorImageVersion;											\
	WORD  MajorSubsystemVersion;          /* 0x30 */					\
	WORD  MinorSubsystemVersion;										\
	DWORD Win32VersionValue;											\
	DWORD SizeOfImage;													\
	DWORD SizeOfHeaders;												\
	DWORD CheckSum;                       /* 0x40 */					\
	WORD  Subsystem;													\
	WORD  DllCharacteristics;											\
	DWORD SizeOfStackReserve;											\
	DWORD SizeOfStackCommit;											\
	DWORD SizeOfHeapReserve;              /* 0x50 */					\
	DWORD SizeOfHeapCommit;												\
	DWORD LoaderFlags;													\
	DWORD NumberOfRvaAndSizes;											\
	IMAGE_DATA_DIRECTORY DataDirectory[16]; /* 0x60 */					\
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;					\
");